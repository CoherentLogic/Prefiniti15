/*
 * Security.js
 * Security routines for the Prefiniti framework
 *
 * John Willis
 * john@prefiniti.com
 *
 * Copyright (C) 2008, AJL Intel-Properties, LLC.
 */
 
var AuthenticationRecord = null;
var HP_SessionKey = null;

function PAuthenticationRecord(UserID, Username, SiteID, AssociationID, DesktopTheme, PAFFLAGS, AutoCatalog) 
{
	this.UserID = UserID;
	this.Username = Username;
	this.SiteID = SiteID;
	this.AssociationID = AssociationID;
	this.DesktopTheme = DesktopTheme;
	this.PAFFLAGS = PAFFLAGS;
	this.AutoCatalog = AutoCatalog;
	this.FrameworkRevision = 2.0;
	GlobPAFFLAGS = PAFFLAGS;
}

PAuthenticationRecord.prototype.XLatToLegacy = function () {
	glob_userid = this.UserID;
	glob_userName = this.Username;
	glob_current_association = this.AssociationID;
	glob_current_site_id = this.SiteID;
	glob_PDMDefaultTheme = this.DesktopTheme;
	glob_FrameworkRevision = this.FrameworkRevision;
};


var ACLboxes = 0;
function PObjectACL(ObjectTypeID, ObjectID)
{
	
}

function PLoginDialog()
{	
	var d = document.getElementById("PGlobalScreen"); 
	var d_nested = document.getElementById("window_container"); 
	var throwawayNode = d.removeChild(d_nested);

	AuthenticationRecord = null;
	p_session = null;
	ClearTasks();
	UnTip();
	ClearLogin();
	soundManager.play('SND_WEEOOPP');
}

function PSignOut()
{
	var rh = new KRequestHeaders();
	rh.Add(new KRequestParam('HP_SessionKey', HP_SessionKey));
	
	var retval = KSynchronousRequest('/Framework/CoreSystem/Security/Resources/PSignOut.cfm', rh);
	
	PLoginDialog();
}

function PAuthenticate(Username, Password)
{
	var unRP = new KRequestParam("username", Username);
	var pwRP = new KRequestParam("password", Password);
	var phkRP = new KRequestParam("HP_PrefinitiHostKey", HP_PrefinitiHostKey);
	var ipRP = new KRequestParam("HP_CGI_NetworkNode", HP_CGI_NetworkNode);
	var browserRP = new KRequestParam("HP_Browser", HP_Browser);
	var osRP = new KRequestParam("HP_OS", HP_OS);
	var uidRP = null;
	
	var parsedDoc = null;
	
	var requestHdr = new KRequestHeaders();
	var sessionMgrRH = new KRequestHeaders();
	var sessionMgr = null;
	
	with (requestHdr) {
		Add(unRP);
		Add(pwRP);
	}
	
	with (sessionMgrRH) {
		Add(unRP);
		Add(pwRP);
		Add(phkRP);
		Add(ipRP);
		Add(browserRP);
		Add(osRP);
	}
		
	parsedDoc = KParseXML(KSynchronousRequest('/Framework/CoreSystem/Security/Resources/PAuthenticationRecord.cfm', requestHdr));
	
	
	var authStat = KGetSingleTag(parsedDoc, "success");
	
	if(authStat != 'false') {
		PLoadAuthenticationRecord(parsedDoc);
		
		uidRP = new KRequestParam("user_id", AuthenticationRecord.UserID);
		sessionMgrRH.Add(uidRP);
		
		sessionMgr = KSynchronousRequest('/Framework/CoreSystem/Security/Resources/PGetSession.cfm', sessionMgrRH);
		HP_SessionKey = sessionMgr.trim();
		
		//alert("Session Key: " + HP_SessionKey);
		if (sessionMgr == 'SESSIONS_OPEN') {
			alert('Sessions already open.');
		}
		else {
			InitializePrefiniti();
		}
	}
	else {
		LoginError("Could not sign in: " + KGetSingleTag(parsedDoc, "failurereason"));
	}
}

function PSwitchAssoc(AssocID, SiteID)
{
	AuthenticationRecord.AssociationID = AssocID;
	AuthenticationRecord.SiteID = SiteID;
	
	AuthenticationRecord.XLatToLegacy();
	
	p_session.Framework.FindWindow('PSessionBar').RefreshClientArea();
	AjaxRefreshTarget();
}

function PLoadAuthenticationRecord(parsedDoc) 
{
	var userid;
	var username;
	var siteid;
	var associationid;
	var desktoptheme;
	var pafflags;
	var autocatalog;
	
	userid = KGetSingleTag(parsedDoc, "userid");
	username = KGetSingleTag(parsedDoc, "username");
	siteid = KGetSingleTag(parsedDoc, "siteid");
	associationid = KGetSingleTag(parsedDoc, "associationid");
	desktoptheme = KGetSingleTag(parsedDoc, "desktoptheme");
	pafflags = parseInt(KGetSingleTag(parsedDoc, "pafflags"));
	autocatalog = KGetSingleTag(parsedDoc, "autocatalog");
	
	AuthenticationRecord = new PAuthenticationRecord(userid, username, siteid, associationid, desktoptheme, pafflags, autocatalog);
	AuthenticationRecord.XLatToLegacy();
}

function PSessionBar() 
{
	/* Window code generated by Prefiniti Development System 1.0.2 */

	var wRef = p_session.Framework.FindWindow('PSessionBar');
	if (!wRef) {
		var PSB_handle = 'PSessionBar';
		var PSB_title  = 'Member Services';
		var PSB_icon   = new PIcon('/graphics/AppIconResources/crystal_project/16x16/actions/agt_member.png', P_SMALLICON);
		var PSB_rect   = new PRect(0, 0, 520, 400);
		var PSB_style  = WS_ALLOWCLOSE | WS_ALLOWMINIMIZE | WS_SHOWAPPMENU | WS_ENABLEPDM | WS_ALLOWRESIZE | WS_ALLOWMAXIMIZE;
		var PSB_MessageHandler  = null;
		var PSB_BackgroundColor = new PColor(255, 255, 255);
	
		var PSB_window = new PWindow(PSB_handle, PSB_title, PSB_rect, PSB_icon, PSB_style, PSB_MessageHandler, PSB_BackgroundColor);
	
		wRef = p_session.Framework.CreateWindow(PSB_window);
		PSB_ClientAreaURL = '/framework/CoreSystem/DesktopTools/SessionBar.cfm';

		wRef.LoadClientArea(PSB_ClientAreaURL);
	
		var orc = function () {
			p_session.Framework.SetFocus(PSB_handle);
		};
		var PSB_ToolbarStripURL = '/framework/CoreSystem/DesktopTools/SessionBar_Toolbar.cfm';
		wRef.LoadToolbarStrip(PSB_ToolbarStripURL, orc);
	
	}
	
	

}

function KSessionMonitor()
{
	var rh = new KRequestHeaders();
	rh.Add(new KRequestParam("HP_SessionKey", HP_SessionKey));
	
	SessionStatus = KSynchronousRequest('/Framework/CoreSystem/Security/Resources/KSessionMonitor.cfm', rh);
	SessionStatus.trim();
	
	if (parseInt(SessionStatus) != 1) {
		PLoginDialog();
		LoginError("Your session has been closed remotely.");
	}
		
}

function LoginError(text) 
{
	SetInnerHTML('LoginError', '<img src="/graphics/exclamation.png" align="absmiddle"> ' + text);
	showDiv('LoginError');
	soundManager.play('SND_ERROR');
}

function ClearLogin() 
{
	SetInnerHTML('LoginError', '');
	hideDiv('LoginError');
	SetValue('UserName', '');
	SetValue('Password', '');
}

function PSessionAdmin() 
{
	/* Window code generated by Prefiniti Development System 1.0.3 */
	var MS_handle = 'ManageSessions';
	var wRef = p_session.Framework.FindWindow(MS_handle);
	
	if (!wRef) {
		var MS_title  = 'Manage Sessions';
		var MS_icon   = new PIcon('/graphics/connect.png', P_SMALLICON);
		var MS_rect   = new PAutoRect(640, 480);
		var MS_style  = WS_ALLOWCLOSE | WS_ALLOWMINIMIZE | WS_ALLOWREFRESH | WS_SHOWAPPMENU | WS_ENABLEPDM;
		var MS_MessageHandler  = null;
		var MS_BackgroundColor = new PColor(255, 255, 255);
	
		var MS_window = new PWindow(MS_handle, MS_title, MS_rect, MS_icon, MS_style, MS_MessageHandler, MS_BackgroundColor);
	
		wRef = p_session.Framework.CreateWindow(MS_window);
	}
	
	MS_ClientAreaURL = '/Framework/CoreSystem/HTMLResources/PManageSessions.cfm';
	wRef.LoadClientArea(MS_ClientAreaURL);
}

function KillSession(SessionID)
{	
	var rh = new KRequestHeaders();
	rh.Add(new KRequestParam("SessionID", SessionID));
	
	var result = KSynchronousRequest('/Framework/CoreSystem/HTMLResources/KillSession.cfm', rh);
	SetInnerHTML('MS_Status', result);
}